// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 14:40:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decoder_core_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decoder_core_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg decode_failed;
reg decode_finish;
reg init_finish;
reg shuffle_finish;
reg start;
// wires                                               
wire decore_start;
wire failed;
wire finish;
wire init_start;
wire [1:0] s_source;
wire shuffle_start;

// assign statements (if any)                          
decoder_core_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.decode_failed(decode_failed),
	.decode_finish(decode_finish),
	.decore_start(decore_start),
	.failed(failed),
	.finish(finish),
	.init_finish(init_finish),
	.init_start(init_start),
	.s_source(s_source),
	.shuffle_finish(shuffle_finish),
	.shuffle_start(shuffle_start),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// shuffle_finish
initial
begin
	shuffle_finish = 1'b0;
	shuffle_finish = #360000 1'b1;
	shuffle_finish = #10000 1'b0;
end 

// start
initial
begin
	start = 1'b0;
	start = #40000 1'b1;
	start = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// decode_failed
initial
begin
	decode_failed = 1'b0;
	decode_failed = #730000 1'b1;
	decode_failed = #10000 1'b0;
end 

// decode_finish
initial
begin
	decode_finish = 1'b0;
end 

// init_finish
initial
begin
	init_finish = 1'b0;
	init_finish = #160000 1'b1;
	init_finish = #10000 1'b0;
end 
endmodule

