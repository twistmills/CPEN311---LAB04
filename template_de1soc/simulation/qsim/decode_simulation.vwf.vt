// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 19:49:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          decode
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decode_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] decode_q;
reg [7:0] encrypted_data;
reg fail_sensitive;
reg start;
// wires                                               
wire [7:0] decode_address;
wire [7:0] decode_data;
wire decode_wren;
wire [7:0] decrypted_addr;
wire [7:0] decrypted_data;
wire [7:0] encrypted_addr;
wire fail;
wire finish;

// assign statements (if any)                          
decode i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.decode_address(decode_address),
	.decode_data(decode_data),
	.decode_q(decode_q),
	.decode_wren(decode_wren),
	.decrypted_addr(decrypted_addr),
	.decrypted_data(decrypted_data),
	.encrypted_addr(encrypted_addr),
	.encrypted_data(encrypted_data),
	.fail(fail),
	.fail_sensitive(fail_sensitive),
	.finish(finish),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// decode_q[ 7 ]
initial
begin
	decode_q[7] = 1'b0;
end 
// decode_q[ 6 ]
initial
begin
	decode_q[6] = 1'b0;
end 
// decode_q[ 5 ]
initial
begin
	decode_q[5] = 1'b0;
	decode_q[5] = #640000 1'b1;
end 
// decode_q[ 4 ]
initial
begin
	decode_q[4] = 1'b0;
	decode_q[4] = #320000 1'b1;
	decode_q[4] = #320000 1'b0;
	decode_q[4] = #320000 1'b1;
end 
// decode_q[ 3 ]
initial
begin
	repeat(3)
	begin
		decode_q[3] = 1'b0;
		decode_q[3] = #160000 1'b1;
		# 160000;
	end
	decode_q[3] = 1'b0;
end 
// decode_q[ 2 ]
initial
begin
	repeat(6)
	begin
		decode_q[2] = 1'b0;
		decode_q[2] = #80000 1'b1;
		# 80000;
	end
	decode_q[2] = 1'b0;
end 
// decode_q[ 1 ]
initial
begin
	repeat(12)
	begin
		decode_q[1] = 1'b0;
		decode_q[1] = #40000 1'b1;
		# 40000;
	end
	decode_q[1] = 1'b0;
end 
// decode_q[ 0 ]
always
begin
	decode_q[0] = 1'b0;
	decode_q[0] = #20000 1'b1;
	#20000;
end 
// encrypted_data[ 7 ]
initial
begin
	encrypted_data[7] = 1'b0;
	encrypted_data[7] = #80000 1'b1;
	encrypted_data[7] = #80000 1'b0;
	encrypted_data[7] = #80000 1'b1;
	encrypted_data[7] = #80000 1'b0;
	encrypted_data[7] = #240000 1'b1;
	encrypted_data[7] = #320000 1'b0;
	encrypted_data[7] = #80000 1'b1;
end 
// encrypted_data[ 6 ]
initial
begin
	encrypted_data[6] = 1'b1;
	encrypted_data[6] = #80000 1'b0;
	encrypted_data[6] = #80000 1'b1;
	encrypted_data[6] = #240000 1'b0;
	encrypted_data[6] = #80000 1'b1;
	encrypted_data[6] = #160000 1'b0;
	encrypted_data[6] = #160000 1'b1;
	encrypted_data[6] = #80000 1'b0;
	encrypted_data[6] = #80000 1'b1;
end 
// encrypted_data[ 5 ]
initial
begin
	encrypted_data[5] = 1'b0;
	encrypted_data[5] = #80000 1'b1;
	encrypted_data[5] = #320000 1'b0;
	encrypted_data[5] = #80000 1'b1;
	encrypted_data[5] = #160000 1'b0;
	encrypted_data[5] = #80000 1'b1;
	encrypted_data[5] = #240000 1'b0;
end 
// encrypted_data[ 4 ]
initial
begin
	encrypted_data[4] = 1'b1;
	encrypted_data[4] = #80000 1'b0;
	encrypted_data[4] = #80000 1'b1;
	encrypted_data[4] = #80000 1'b0;
	encrypted_data[4] = #80000 1'b1;
	encrypted_data[4] = #160000 1'b0;
	encrypted_data[4] = #320000 1'b1;
	encrypted_data[4] = #80000 1'b0;
end 
// encrypted_data[ 3 ]
initial
begin
	encrypted_data[3] = 1'b0;
	encrypted_data[3] = #80000 1'b1;
	encrypted_data[3] = #80000 1'b0;
	encrypted_data[3] = #320000 1'b1;
	encrypted_data[3] = #160000 1'b0;
	encrypted_data[3] = #240000 1'b1;
	encrypted_data[3] = #80000 1'b0;
end 
// encrypted_data[ 2 ]
initial
begin
	encrypted_data[2] = 1'b0;
	encrypted_data[2] = #80000 1'b1;
	encrypted_data[2] = #80000 1'b0;
	encrypted_data[2] = #80000 1'b1;
	encrypted_data[2] = #80000 1'b0;
	encrypted_data[2] = #80000 1'b1;
	encrypted_data[2] = #80000 1'b0;
	encrypted_data[2] = #80000 1'b1;
	encrypted_data[2] = #80000 1'b0;
	encrypted_data[2] = #160000 1'b1;
	encrypted_data[2] = #80000 1'b0;
end 
// encrypted_data[ 1 ]
initial
begin
	encrypted_data[1] = 1'b1;
	encrypted_data[1] = #160000 1'b0;
	encrypted_data[1] = #240000 1'b1;
	encrypted_data[1] = #240000 1'b0;
	encrypted_data[1] = #80000 1'b1;
	encrypted_data[1] = #80000 1'b0;
	encrypted_data[1] = #80000 1'b1;
end 
// encrypted_data[ 0 ]
initial
begin
	encrypted_data[0] = 1'b0;
	encrypted_data[0] = #80000 1'b1;
	encrypted_data[0] = #160000 1'b0;
	encrypted_data[0] = #80000 1'b1;
	encrypted_data[0] = #80000 1'b0;
	encrypted_data[0] = #160000 1'b1;
	encrypted_data[0] = #160000 1'b0;
end 

// fail_sensitive
initial
begin
	fail_sensitive = 1'b0;
end 

// start
initial
begin
	start = 1'b1;
	start = #10000 1'b0;
end 
endmodule

