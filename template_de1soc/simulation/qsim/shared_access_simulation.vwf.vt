// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 14:42:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shared_s_access
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shared_s_access_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] decode_address;
reg [7:0] init_address;
reg [7:0] init_data;
reg [7:0] s_q;
reg [7:0] shuffle_address;
reg [7:0] shuffle_data;
reg shuffle_wren;
reg [1:0] source;
// wires                                               
wire [7:0] decode_q;
wire [7:0] s_address;
wire [7:0] s_data;
wire s_wren;
wire [7:0] shuffle_q;

// assign statements (if any)                          
shared_s_access i1 (
// port map - connection between master ports and signals/registers   
	.decode_address(decode_address),
	.decode_q(decode_q),
	.init_address(init_address),
	.init_data(init_data),
	.s_address(s_address),
	.s_data(s_data),
	.s_q(s_q),
	.s_wren(s_wren),
	.shuffle_address(shuffle_address),
	.shuffle_data(shuffle_data),
	.shuffle_q(shuffle_q),
	.shuffle_wren(shuffle_wren),
	.source(source)
);
initial 
begin 
#1000000 $finish;
end 
// source[ 1 ]
initial
begin
	source[1] = 1'b0;
	source[1] = #100000 1'b1;
	source[1] = #550000 1'b0;
	source[1] = #200000 1'b1;
end 
// source[ 0 ]
initial
begin
	source[0] = 1'b1;
	source[0] = #100000 1'b0;
	source[0] = #240000 1'b1;
end 
// init_address[ 7 ]
initial
begin
	init_address[7] = 1'b0;
end 
// init_address[ 6 ]
initial
begin
	init_address[6] = 1'b0;
end 
// init_address[ 5 ]
initial
begin
	init_address[5] = 1'b0;
end 
// init_address[ 4 ]
initial
begin
	init_address[4] = 1'b1;
end 
// init_address[ 3 ]
initial
begin
	init_address[3] = 1'b0;
end 
// init_address[ 2 ]
initial
begin
	init_address[2] = 1'b0;
end 
// init_address[ 1 ]
initial
begin
	init_address[1] = 1'b1;
end 
// init_address[ 0 ]
initial
begin
	init_address[0] = 1'b0;
end 
// init_data[ 7 ]
initial
begin
	init_data[7] = 1'b0;
end 
// init_data[ 6 ]
initial
begin
	init_data[6] = 1'b0;
end 
// init_data[ 5 ]
initial
begin
	init_data[5] = 1'b0;
end 
// init_data[ 4 ]
initial
begin
	init_data[4] = 1'b1;
end 
// init_data[ 3 ]
initial
begin
	init_data[3] = 1'b0;
end 
// init_data[ 2 ]
initial
begin
	init_data[2] = 1'b0;
end 
// init_data[ 1 ]
initial
begin
	init_data[1] = 1'b0;
end 
// init_data[ 0 ]
initial
begin
	init_data[0] = 1'b1;
end 
// shuffle_address[ 7 ]
initial
begin
	shuffle_address[7] = 1'b1;
end 
// shuffle_address[ 6 ]
initial
begin
	shuffle_address[6] = 1'b1;
end 
// shuffle_address[ 5 ]
initial
begin
	shuffle_address[5] = 1'b1;
end 
// shuffle_address[ 4 ]
initial
begin
	shuffle_address[4] = 1'b1;
end 
// shuffle_address[ 3 ]
initial
begin
	shuffle_address[3] = 1'b1;
end 
// shuffle_address[ 2 ]
initial
begin
	shuffle_address[2] = 1'b1;
end 
// shuffle_address[ 1 ]
initial
begin
	shuffle_address[1] = 1'b1;
end 
// shuffle_address[ 0 ]
initial
begin
	shuffle_address[0] = 1'b0;
end 
// shuffle_data[ 7 ]
initial
begin
	shuffle_data[7] = 1'b1;
end 
// shuffle_data[ 6 ]
initial
begin
	shuffle_data[6] = 1'b1;
end 
// shuffle_data[ 5 ]
initial
begin
	shuffle_data[5] = 1'b1;
end 
// shuffle_data[ 4 ]
initial
begin
	shuffle_data[4] = 1'b1;
end 
// shuffle_data[ 3 ]
initial
begin
	shuffle_data[3] = 1'b1;
end 
// shuffle_data[ 2 ]
initial
begin
	shuffle_data[2] = 1'b1;
end 
// shuffle_data[ 1 ]
initial
begin
	shuffle_data[1] = 1'b1;
end 
// shuffle_data[ 0 ]
initial
begin
	shuffle_data[0] = 1'b1;
end 

// shuffle_wren
always
begin
	shuffle_wren = 1'b0;
	shuffle_wren = #10000 1'b1;
	#10000;
end 
// decode_address[ 7 ]
initial
begin
	decode_address[7] = 1'b1;
end 
// decode_address[ 6 ]
initial
begin
	decode_address[6] = 1'b0;
end 
// decode_address[ 5 ]
initial
begin
	decode_address[5] = 1'b1;
end 
// decode_address[ 4 ]
initial
begin
	decode_address[4] = 1'b0;
end 
// decode_address[ 3 ]
initial
begin
	decode_address[3] = 1'b1;
end 
// decode_address[ 2 ]
initial
begin
	decode_address[2] = 1'b0;
end 
// decode_address[ 1 ]
initial
begin
	decode_address[1] = 1'b1;
end 
// decode_address[ 0 ]
initial
begin
	decode_address[0] = 1'b1;
end 
// s_q[ 7 ]
initial
begin
	s_q[7] = 1'b0;
	s_q[7] = #460000 1'b1;
end 
// s_q[ 6 ]
initial
begin
	s_q[6] = 1'b1;
	s_q[6] = #460000 1'b0;
end 
// s_q[ 5 ]
initial
begin
	s_q[5] = 1'b1;
	s_q[5] = #460000 1'b0;
end 
// s_q[ 4 ]
initial
begin
	s_q[4] = 1'b0;
	s_q[4] = #140000 1'b1;
	s_q[4] = #320000 1'b0;
	s_q[4] = #320000 1'b1;
end 
// s_q[ 3 ]
initial
begin
	s_q[3] = 1'b1;
	# 140000;
	repeat(2)
	begin
		s_q[3] = 1'b0;
		s_q[3] = #160000 1'b1;
		# 160000;
	end
	s_q[3] = 1'b0;
	s_q[3] = #160000 1'b1;
end 
// s_q[ 2 ]
initial
begin
	s_q[2] = 1'b0;
	# 60000;
	repeat(5)
	begin
		s_q[2] = 1'b1;
		s_q[2] = #80000 1'b0;
		# 80000;
	end
	s_q[2] = 1'b1;
	s_q[2] = #80000 1'b0;
end 
// s_q[ 1 ]
initial
begin
	s_q[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		s_q[1] = 1'b1;
		s_q[1] = #40000 1'b0;
		# 40000;
	end
	s_q[1] = 1'b1;
end 
// s_q[ 0 ]
always
begin
	s_q[0] = 1'b1;
	s_q[0] = #20000 1'b0;
	#20000;
end 
endmodule

