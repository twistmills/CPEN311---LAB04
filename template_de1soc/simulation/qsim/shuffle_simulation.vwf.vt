// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 14:19:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shuffle_memory_with_key
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shuffle_memory_with_key_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [23:0] secret_key;
reg [7:0] shuffle_q;
reg start;
// wires                                               
wire finish;
wire [7:0] shuffle_address;
wire [7:0] shuffle_data;
wire shuffle_wren;

// assign statements (if any)                          
shuffle_memory_with_key i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.finish(finish),
	.secret_key(secret_key),
	.shuffle_address(shuffle_address),
	.shuffle_data(shuffle_data),
	.shuffle_q(shuffle_q),
	.shuffle_wren(shuffle_wren),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// secret_key[ 23 ]
initial
begin
	secret_key[23] = 1'b0;
end 
// secret_key[ 22 ]
initial
begin
	secret_key[22] = 1'b0;
end 
// secret_key[ 21 ]
initial
begin
	secret_key[21] = 1'b0;
end 
// secret_key[ 20 ]
initial
begin
	secret_key[20] = 1'b0;
end 
// secret_key[ 19 ]
initial
begin
	secret_key[19] = 1'b0;
end 
// secret_key[ 18 ]
initial
begin
	secret_key[18] = 1'b0;
end 
// secret_key[ 17 ]
initial
begin
	secret_key[17] = 1'b0;
end 
// secret_key[ 16 ]
initial
begin
	secret_key[16] = 1'b0;
end 
// secret_key[ 15 ]
initial
begin
	secret_key[15] = 1'b0;
end 
// secret_key[ 14 ]
initial
begin
	secret_key[14] = 1'b0;
end 
// secret_key[ 13 ]
initial
begin
	secret_key[13] = 1'b0;
end 
// secret_key[ 12 ]
initial
begin
	secret_key[12] = 1'b0;
end 
// secret_key[ 11 ]
initial
begin
	secret_key[11] = 1'b0;
end 
// secret_key[ 10 ]
initial
begin
	secret_key[10] = 1'b0;
end 
// secret_key[ 9 ]
initial
begin
	secret_key[9] = 1'b1;
end 
// secret_key[ 8 ]
initial
begin
	secret_key[8] = 1'b0;
end 
// secret_key[ 7 ]
initial
begin
	secret_key[7] = 1'b0;
end 
// secret_key[ 6 ]
initial
begin
	secret_key[6] = 1'b1;
end 
// secret_key[ 5 ]
initial
begin
	secret_key[5] = 1'b0;
end 
// secret_key[ 4 ]
initial
begin
	secret_key[4] = 1'b0;
end 
// secret_key[ 3 ]
initial
begin
	secret_key[3] = 1'b1;
end 
// secret_key[ 2 ]
initial
begin
	secret_key[2] = 1'b0;
end 
// secret_key[ 1 ]
initial
begin
	secret_key[1] = 1'b0;
end 
// secret_key[ 0 ]
initial
begin
	secret_key[0] = 1'b1;
end 
// shuffle_q[ 7 ]
initial
begin
	shuffle_q[7] = 1'b0;
end 
// shuffle_q[ 6 ]
initial
begin
	shuffle_q[6] = 1'b0;
end 
// shuffle_q[ 5 ]
initial
begin
	shuffle_q[5] = 1'b0;
	shuffle_q[5] = #640000 1'b1;
end 
// shuffle_q[ 4 ]
initial
begin
	shuffle_q[4] = 1'b0;
	shuffle_q[4] = #320000 1'b1;
	shuffle_q[4] = #320000 1'b0;
	shuffle_q[4] = #320000 1'b1;
end 
// shuffle_q[ 3 ]
initial
begin
	repeat(3)
	begin
		shuffle_q[3] = 1'b0;
		shuffle_q[3] = #160000 1'b1;
		# 160000;
	end
	shuffle_q[3] = 1'b0;
end 
// shuffle_q[ 2 ]
initial
begin
	repeat(6)
	begin
		shuffle_q[2] = 1'b0;
		shuffle_q[2] = #80000 1'b1;
		# 80000;
	end
	shuffle_q[2] = 1'b0;
end 
// shuffle_q[ 1 ]
initial
begin
	repeat(12)
	begin
		shuffle_q[1] = 1'b0;
		shuffle_q[1] = #40000 1'b1;
		# 40000;
	end
	shuffle_q[1] = 1'b0;
end 
// shuffle_q[ 0 ]
always
begin
	shuffle_q[0] = 1'b0;
	shuffle_q[0] = #20000 1'b1;
	#20000;
end 

// start
initial
begin
	start = 1'b0;
	start = #20000 1'b1;
	start = #20000 1'b0;
end 
endmodule

